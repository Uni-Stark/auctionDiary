// Generated by view binder compiler. Do not edit!
package kr.uni.auctiondiary.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.AppCompatTextView;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import kr.uni.auctiondiary.R;

public final class ListAuctionNoteBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final TextView auctionNoteListDetailLocation;

  @NonNull
  public final ImageView auctionNoteListIcon;

  @NonNull
  public final AppCompatTextView auctionNoteListSimpleLocation;

  @NonNull
  public final ConstraintLayout auctionNoteListSpecification;

  @NonNull
  public final AppCompatTextView auctionNoteListTag;

  @NonNull
  public final TextView auctionSpecificationApt;

  @NonNull
  public final TextView auctionSpecificationLand;

  @NonNull
  public final TextView auctionSpecificationOffice;

  @NonNull
  public final TextView auctionSpecificationStore;

  private ListAuctionNoteBinding(@NonNull ConstraintLayout rootView,
      @NonNull TextView auctionNoteListDetailLocation, @NonNull ImageView auctionNoteListIcon,
      @NonNull AppCompatTextView auctionNoteListSimpleLocation,
      @NonNull ConstraintLayout auctionNoteListSpecification,
      @NonNull AppCompatTextView auctionNoteListTag, @NonNull TextView auctionSpecificationApt,
      @NonNull TextView auctionSpecificationLand, @NonNull TextView auctionSpecificationOffice,
      @NonNull TextView auctionSpecificationStore) {
    this.rootView = rootView;
    this.auctionNoteListDetailLocation = auctionNoteListDetailLocation;
    this.auctionNoteListIcon = auctionNoteListIcon;
    this.auctionNoteListSimpleLocation = auctionNoteListSimpleLocation;
    this.auctionNoteListSpecification = auctionNoteListSpecification;
    this.auctionNoteListTag = auctionNoteListTag;
    this.auctionSpecificationApt = auctionSpecificationApt;
    this.auctionSpecificationLand = auctionSpecificationLand;
    this.auctionSpecificationOffice = auctionSpecificationOffice;
    this.auctionSpecificationStore = auctionSpecificationStore;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ListAuctionNoteBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ListAuctionNoteBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.list_auction_note, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ListAuctionNoteBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.auctionNoteListDetailLocation;
      TextView auctionNoteListDetailLocation = ViewBindings.findChildViewById(rootView, id);
      if (auctionNoteListDetailLocation == null) {
        break missingId;
      }

      id = R.id.auctionNoteListIcon;
      ImageView auctionNoteListIcon = ViewBindings.findChildViewById(rootView, id);
      if (auctionNoteListIcon == null) {
        break missingId;
      }

      id = R.id.auctionNoteListSimpleLocation;
      AppCompatTextView auctionNoteListSimpleLocation = ViewBindings.findChildViewById(rootView, id);
      if (auctionNoteListSimpleLocation == null) {
        break missingId;
      }

      id = R.id.auctionNoteListSpecification;
      ConstraintLayout auctionNoteListSpecification = ViewBindings.findChildViewById(rootView, id);
      if (auctionNoteListSpecification == null) {
        break missingId;
      }

      id = R.id.auctionNoteListTag;
      AppCompatTextView auctionNoteListTag = ViewBindings.findChildViewById(rootView, id);
      if (auctionNoteListTag == null) {
        break missingId;
      }

      id = R.id.auctionSpecificationApt;
      TextView auctionSpecificationApt = ViewBindings.findChildViewById(rootView, id);
      if (auctionSpecificationApt == null) {
        break missingId;
      }

      id = R.id.auctionSpecificationLand;
      TextView auctionSpecificationLand = ViewBindings.findChildViewById(rootView, id);
      if (auctionSpecificationLand == null) {
        break missingId;
      }

      id = R.id.auctionSpecificationOffice;
      TextView auctionSpecificationOffice = ViewBindings.findChildViewById(rootView, id);
      if (auctionSpecificationOffice == null) {
        break missingId;
      }

      id = R.id.auctionSpecificationStore;
      TextView auctionSpecificationStore = ViewBindings.findChildViewById(rootView, id);
      if (auctionSpecificationStore == null) {
        break missingId;
      }

      return new ListAuctionNoteBinding((ConstraintLayout) rootView, auctionNoteListDetailLocation,
          auctionNoteListIcon, auctionNoteListSimpleLocation, auctionNoteListSpecification,
          auctionNoteListTag, auctionSpecificationApt, auctionSpecificationLand,
          auctionSpecificationOffice, auctionSpecificationStore);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
